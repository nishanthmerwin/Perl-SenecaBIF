# Practice and Challenge questions:
# Q1.
# Write the code for a Perl program that asks the user how many rows of
# an isoscelles triangle they wish to display (a positive whole number) and then
# draws the triangle on the screen. Each row of the triangle is displayed as
# * characters and each subsequent row contains 2 more asterisks '*' than the
# previous row!
# For example, if the user entered 5 for rows, your program would display:
#
#     *
#    ***
#   *****
#  *******
# *********

# For example, if the user entered 8 for rows, your program would display:
#
#        *
#       ***
#      *****
#     *******
#    *********
#   ***********
#  *************
# ***************

# Q2.
# Modify the program you wrote in Question #1 such that instead of the triangle
# being comprised of rows of asterisks '*', each row is made up of the digits 1 through 9
# (However, your program will only display triangles that are between 1 and 9 rows in size (inclusive)).
# For example, if the user entered 5 for rows, your program would display:
#
#     1
#    222
#   33333
#  4444444
# 555555555

# Q3 (Challenge Question).
# Modify the program you wrote in Question #2 such that instead of each row of the
# triangle being comprised of the same digit, it is made up of increasing values of
# digits starting from 0 until half of the row is drawn at which point the program
# would display the remainder of the row in decreasing values of digits!
# Your program will only display triangles that are between 1 and 9 rows in size (inclusive).
# For example, if the user entered 7 for rows, your program would display:
#
#       0
#      010
#     01210
#    0123210
#   012343210
#  01234543210
# 0123456543210


# Q4.
# Store the following key/value pairs in a hash-table:
# A / "Adenine"
# T / "Thymine"
# C / "Cytosine"
# G / "Guanine"
# U / "Uracil"
#
# Use the keys( ) function to display all of
# the hash's keys. Use the values( ) function to
# display all of the hash's values.
#
# Write a program that asks the user to enter
# a key value, and displays the value for that
# key if it is found within the hash or the text:
# "Cannot find entry for '?' if the key is not found.

# Q5.
# Write a PERL program that works as an online
# DICTIONARY that can store new words and their
# accompanying definitions.
# Your program should begin by asking the user
# to enter a "word" (any sequence of alphabetic
# characters).
# If the word is already in the dictionary
# (case sensitivity of the word should not matter),
# your program would display:
#
# "I already know what that means..."
# word--> definition...

# If the word entered is NOT in the dictionary,
# your program should ask the user to enter a
# definition for the new word and store the new word, along
# with its definition, in the dictionary.
#
# The program should then ask the user if they wish
# to enter another word, or the word "exit" to stop
# the program.
# NOTE: The word "exit" can be entered as
# "Exit", EXIT", "eXIt", etc.
# (i.e. case sensitivity does not matter).
#
# Your dictionary should be able to grow
# indefinitely as new words are enetered.
# The only limitation will be your computers'
# available built in memory.
#
# HINT: Your program will be more efficient if
# hashes are used.