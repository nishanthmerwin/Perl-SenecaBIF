# In-class exercises:
# Q1:
# Write a perl program that asks a user to enter
# a money value in cents and converts the amount to:
# $2     coins (toonies),
# $1     coins (loonies),
# $0.25  coins (quarters),
# $0.10  coins (dimes),
# $0.05  coins (nickels), and
# $0.01  coins (pennies) using the fewest amount
# of coins possible!

# (eg.) If the user enters: 202, your program
# should display:

# 202 cents is:
#
# 1 toonies
# 0 loonies
# 0 quarters
# 0 dimes
# 0 nickels, and
# 2 pennies
#
# Number of coins used... 3

# Q2:
# The factorial of a non-negative integer "n" is written
# as n! (pronounced "n factorial") and is defined as
# follows:
# n! = n * (n-1) * (n-2) * ... * 1
# and when n == 0 n! = 1
# For example, 5! = 5 * 4 * 3 * 2 * 1 = 120
# Write a Perl program that asks the user to enter
# a non-negative integer (up to a maximum of 1000), then computes and prints
# that value's factorial.
# If the value entered by the user exceeds 1000, then only an error message is
# displayed and no calculations performed!

# Q3:
# The value of pi can be calculated by evaluating the infinite arithmetic series:
# pi = 4 - 4/3 + 4/5 - 4/7 + 4/9 ... 4/(2n + 1)
# First, pick up from the standard input (keyboard)
# how many times this loop should be executed ad store
# the answer in a scalar variable.
# Next, write the Perl code that will evaluate this expression
# to the number of iterations entered by the user.
# Display the final value on the screen (accurate to 10 decimal places).
# NOTE: You may declare any extra variables that are required.

# Q4 (Challenge Portion):
# Using the string functions: substr, index, sprintf, reverse, etc. as well as loops
# and the modulus % operator, write a perl program that asks the user to
# enter a positive whole number (0 is an acceptable value) which
# your program will then convert to a 32-bit binary number
# representing that integer's equivalent value.
# Recall: binary numbers contain only 1's and 0's and are
#         based on base 2 where the rightmost digit
#         has a value of 2^0, the second rightmost 2^1, etc.
#         until the leftmost digit is reached which has a
#         value of 2^31 (^ == exponent).
#
# For example: If the user enters a value of 9, then your
# program would convert and display the value:
#
# 00000000 00000000 00000000 00001001
#                                |  |
#                                |  |
#                1x2^3 bit (8)<--+  +->1x2^0 bit (1)

# HINT: In a loop, repeatedly determine if the value entered by the user
#       has a remainder when divided by 2. For each iteration however, you must
#       reduce the the value by a factor of 2 (i.e. cut it in half) stopping when
#       value becomes 0. The value returned by the remainder operation (either a 1 or 0)
#       can be stored in a string for further processing!
#       You may also consideer starting with a string of: "00000000 00000000 00000000 00000000".