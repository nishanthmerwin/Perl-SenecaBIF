Seneca College
BIF712 - Concepts of Programming with Perl
Assignment #1 Fall 2015 (153)

Introduction:
While on a safari through the Amazon jungle, an anthropologist
stumbled upon a few pieces of amber.
Upon further inspection, he noticed a number of small insects buried within.
Further tests showed that the amber was several millions of years old, and
the insects it encapsulated had never before been classifed.
A DNA analysis of one insect produced some very strange results.
It was determined that the insect belonged to the family Ceratopogonidae
(a type of mosquito) but its blood sample contained DNA sequences of a
totally different organism! The scientists at Gene's 'R' Us Inc. have
encountered an unusal problem with the output that their "ordinarily" reliable
computer, the "Gene-Sequencer 6000", has produced.

It was determined that the organism has never before been classified, and
its DNA sequences which would normally only contain the base pairs:

Base Pair            Category          Molecular Weight (g/mol)

A or a (Adenine)     Purine            135.13 (c5h5n5)
T or t (Thymine)     Pyrimidine        126.10 (c5h6n2o2)
C or c (Cytosine)    Pyrimidine        111.10 (c4h5n3o)
G or g (Guanine)     Purine            150.12 (c5h4n5o)

U or u (Uracil)      Pyrimidine        112.10 (c4h4n2o2) (for RNA portion only)

have been contaminated with gaps and incomprehensible junk characters.
The entire sequence that was generated is well over 3 billion characters
in length and would be impossible to sift through manually or
by using a word processor.

Specifications:
Therefore, the scientist's at Gene's R Us Inc. would like you to write a standalone
PERL program that will "extract" all of the valid base pair
sequences from the corrupted output generated by the
"Gene-Sequencer 6000" and display the corresponding amino acid letters
to standard output (screen).

The program accepts a single command line argument. In Perl, command line
arguments are stored in the special array @ARGV with $ARGV[0] holding the
the first argument, $ARGV[1], the second argument, etc.

1. A string containing the corrupted data (a scalar).

Rules for processing the data string are as follows:

1. Only the characters 'A', 'T', 'C', and 'G' (UPPER) OR (lower) case
   are acceptable as genetic base pairs. ALL other characters are to be ignored,
   and all output MUST BE displayed in UPPERCASE only!

2. Every 3 valid DNA base pairs that are found within the corrupted data string
   will result in a single letter amino acid being displayed as output
   (represented by a single UPPERCASE alphabetic character) and the specific amino acid
   must correspond to its RNA codon (see below).

   Recall: DNA/RNA compliments are:

   T->A (Thymine's  map Adenine's)
   C->G (Cytosine's map Guanine's)
   G->C (Guanine's  map Cytosine's)
   A->U (Adenine's  map Uracil's, since Thymine is not available in RNA).

   Amino Acid Symbols:
   RNA triplet codes, their corresponding amino acid names, abbreviations,
   and single letter code are listed below.

   RNA triplet code:   Amino Acid:      Abbreviation:  Single-Letter Code:

   AAA/AAG             lysine           lys             K

   GAA/GAG             glutamic acid    glu             E

   AAC/AAU             asparagine       asn             N

   GAC/GAU             aspartic acid    asp             D

   ACA/ACC
   ACG/ACU             threonine        thr             T

   GCA/GCC
   GCG/GCU             alanine          ala             A


   GGA/GGC
   GGG/GGU             glycine          gly             G

   GUA/GUC
   GUG/GUU             valine           val             V

   AUA/AUG
   (start)             methionine       met             M

   UAA/UAG
   UGA
   (stop)                                               *


   AUC/AUU             isoleucine       ile             I

   UAC/UAU             tyrosine         tyr             Y

   CAA/CAG             glutamine        gln             Q

   AGC/AGU
   UCA/UCC
   UCG/UCU             serine           ser             S

   CAC/CAU             histidine        his             H

   UGC/UGU             cysteine         cys             C

   CCA/CCC
   CCG/CCU             proline          pro             P

   UGG                 tryptophan       try             W

   AGA/AGG
   CGA/CGC
   CGG/CGU             arginine         arg             R

   UUA/UUG
   CUA/CUC
   CUG/CUU             leucine          leu             L

   UUC/UUU             phenylalanine    phe             F

   For example, if the "valid" DNA strand extracted was:
   TAT GGT CCG TGT TTT ATA

   Then, your program would display the follwing as output:

   MPGTKY

   explanation:
   TAT -> maps RNA codon AUA -> which maps amino acid Methionine which has symbol -> M
   GGT -> maps RNA codon CCA -> which maps amino acid Proline    which has symbol -> P
   CCG -> maps RNA codon GGC -> which maps amino acid Glycine    which has symbol -> G
   etc.

3. Amino acid output must be in groups of 10 only and no more than 6 groups
   of 10 may be displayed on each line and a single space must separate each group
   of 10 from other groups of 10. Also, 10 spaces must be written at the start
   of each new line to accomodate for line numbering. The beginning of each line will
   indicate the starting amino acid for that line and numbering must be RIGHT justified
   within the 10 spaces and a single space must appear before the first amino
   acid is displayed. (see below for an example).

        1 ACVFFFLLKN PRKHTLIDTP SNY*KESNFK YSLKFNFNND ISVDQTKSRC SVSISCWIQR
       61 LPSFP*SHES TFREQLWIQN SVVFKVESET SH*VVGIIFV MTISCRNQVS VCSF*LLIGT
      121 KT*TCESPNF *VVGISNPIL *PLSIFCLTS LSVLRLMPKS RSLLDLPRLR VT*TVPNGVL
      181 ELSSRQASCP LTSRFSVGSH SSFVRTSLNG *MVCPETSST TKSSLTPVKG RVRNRSSTHG
      241 PSNV*KEPFT ASVHKPSRAQ GKTSVLRTTS LRGTP*RRSS *ITFFVILL* TTVRPSPLLT
      301 SITASQREET FR*GRL*PSS SFPNGTLPSF RLSSCTSRS* LCYRLSNR*S SCVLPLKGKL
      361 RLFKRLV*RG LCGSLRVPTA RTTVATTLKF KSPSSSKKSE *LTVLS*TSM GCFLSCSSSR
      421 GRRTFLAVPF FTPLEEIPT* VEGPVRTSHT RKAG*KLGKT SFIRTRTRKG S**PLT*ASA
      481 VSCALMGASS FTTSCHSC*V SPTVTPTLR* GCYTSQSA*T GRT*TTSPFL LRMLEGSLFL
      541 ALVEGRLFAM PLRFFSRGPV RLSSMVTTQ* RVLFTCNATT TAVRERSWVV TTAVRTGSST


4. Your program must also compute the total molecular weight of the
   (valid DNA characters) found within the data string and then display
   the amount (accurate to 4 decimal places) on a new line as the final
   line of output.

   ***NOTE***:
   Your program may include any of the Perl language elements/constructs you have
   learned to date (including arrays, hashes, Perl special functions,
   string operators, etc). Keep in mind, that the corrupt data string can be
   of any size, and may contain any number of valid DNA bases (without limit).

   HINT: The data structures required for this program could be
   stored easily and efficiently in a Perl hash table(s)!

Test Program:
   Shortly before the due date for this assignment, a Perl program
   (which may not be be modified in any way) called 'a1test.pl' will be
   made available to you to see if your program is correct.
   Any logical or programmatic errors contained within your program may result in an
   error message being displayed indicating at what stage your program failed.
   You cannot hand in your assignment until this test program indicates that your program
   is acceptable.


Submitting Your Assignment:
You are encouraged to test your program in as many Perl
environments as are available to you, but for submission
purposes, your program must work using the current stable version
of Perl (5.22.0).
Once you have completed and thoroughly tested your Perl script, the
source file must be sent to your instructor by e-mail
following the guidelines written below:

1. e-mail must be sent to: danny.abesdris@senecacollege.ca
2. e-mail subject must be: your subject's course code and section + _AY
   where Y == your assignment number (1, 2, 3, etc).
   (eg. BIF712A_A1)
3. e-mail must be sent from your my.Seneca account ONLY
   (i.e. userid@myseneca.ca)
4. The body of the e-mail is to remain empty (no text or messages)
   and you must attach all of the files as described in the assignment
   outline/requirements (ALL FILES ARE TO BE PLAIN TEXT ONLY!
   NO *.zip, or *.rar, or *.tar.gz, etc will be accepted).

Late Penalty:
-------------
An assignment which is late will receive a penalty
of 10% for every week late (with no maximum penalty)!

In addition to your program's source code and header documentation,
you must include (as Perl comments using the # symbol) the following
Seneca College Student Oath:

Oath:

Student Assignment Submission Form
==================================
I declare that the attached assignment is wholly my own work
in accordance with Seneca Academic Policy.  No part of this
assignment has been copied manually or electronically from any
other source (including web sites) or distributed to other students.

Name(s)                                          Student ID(s)

---------------------------------------------------------------

---------------------------------------------------------------

---------------------------------------------------------------

Follow the instructions in the "news" link on my web page
for submission procedures and the "standards"
link for assignment format and what to include in the assignment.


Due Date:
Due Date: Friday October 16, 2015 @ 11:59:59 P.M.

This assignment is worth 8% of your final grade in BIF712.
Good Luck!
Any Browser!